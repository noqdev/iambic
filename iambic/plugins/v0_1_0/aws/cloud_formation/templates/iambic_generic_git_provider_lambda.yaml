AWSTemplateFormatVersion: 2010-09-09
Description: This creates a lambda function and function url to enable IAMbic generic git provider Integration
Parameters:
  LambdaFunctionName:
    Type: String
    Default: "iambic_generic_git_provider_webhook"
  ImageUri:
    Type: String
  LambdaExecutionRoleArn:
    Type: String
  GenericGitProviderSecretArn:
    Type: String
  LambdaMemorySize:
    Type: Number
    Default: 2048
  LambdaTimeout:
    Type: Number
    Default: 900
  ImportSchedule:
    Type: String
    Default: "cron(0 */2 * * ? *)" # Every 2 hours by default
  ExpireSchedule:
    Type: String
    Default: "cron(5 * * * ? *)" # Every hour at minute 5
  EnforceSchedule:
    Type: String
    Default: "cron(0 * * * ? *)" # Every hour
  DetectSchedule:
    Type: String
    Default: "cron(*/5 * * * ? *)" # Every 5 minutes
Resources:
  IambicWebHookLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName:
        Ref: LambdaFunctionName
      PackageType: Image
      ImageConfig:
          Command:
            - "iambic.plugins.v0_1_0.generic_git_provider.aws_lambda_handler.run_handler"
          EntryPoint:
            - "python"
            - "-m"
            - "awslambdaric"
      Role:
        Ref: LambdaExecutionRoleArn
      Code:
        ImageUri:
          Ref: ImageUri
      Description: IAMbic Webhook Lambda
      TracingConfig:
        Mode: Active
      MemorySize:
        Ref: LambdaMemorySize
      Timeout:
        Ref: LambdaTimeout
      Environment:
          Variables:
            GENERIC_GIT_PROVIDER_SECRET_ARN: !Ref GenericGitProviderSecretArn
  IambicWebHookLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${IambicWebHookLambda}"
      RetentionInDays: 3
  IambicWebHookLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IambicWebHookLambda
      # IambicWebHook is secured using shared webhook secret between GitHub App and Lambda
      FunctionUrlAuthType: 'NONE'
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
  IambicWebHookUrl:
    Type: 'AWS::Lambda::Url'
    Properties:
      AuthType: "NONE"
      TargetFunctionArn: !GetAtt IambicWebHookLambda.Arn
    DependsOn:
      - IambicWebHookLambda

  ImportCronRule:
      Type: 'AWS::Events::Rule'
      Properties:
        ScheduleExpression:
          Ref: ImportSchedule
        Targets:
          - Arn: !GetAtt IambicWebHookLambda.Arn
            Id: "ImportCronTarget"
            Input: '{"command": "import", "source": "EventBridgeCron"}'

  ExpireCronRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression:
        Ref: ExpireSchedule
      Targets:
        - Arn: !GetAtt IambicWebHookLambda.Arn
          Id: "ExpireCronTarget"
          Input: '{"command": "expire", "source": "EventBridgeCron"}'

  EnforceCronRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression:
        Ref: EnforceSchedule
      Targets:
        - Arn: !GetAtt IambicWebHookLambda.Arn
          Id: "EnforceCronTarget"
          Input: '{"command": "enforce", "source": "EventBridgeCron"}'

  DetectCronRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression:
        Ref: DetectSchedule
      Targets:
        - Arn: !GetAtt IambicWebHookLambda.Arn
          Id: "DetectCronTarget"
          Input: '{"command": "detect", "source": "EventBridgeCron"}'

  ImportCronLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref IambicWebHookLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ImportCronRule.Arn

  ExpireCronLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref IambicWebHookLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ExpireCronRule.Arn

  EnforceCronLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref IambicWebHookLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EnforceCronRule.Arn

  DetectCronLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref IambicWebHookLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt DetectCronRule.Arn

Outputs:
  FunctionUrl:
    Description: URL of the Lambda Function
    Value: !GetAtt IambicWebHookUrl.FunctionUrl